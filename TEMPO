* [Creditos](#creditos)
* [Propaganda](#propaganda)
* [Licença](#licença)


Only for rooted devices: If you want the script to be run directly as a
command, place the script in **/system/bin** (or) **/system/xbin** . Then make the
file executable by running the following command:

```sh
    sh
    su
    mount -o rw,remount /system
    cp <script_path>/<script_name> /system/bin/<script_name>
    chmod 555 /system/bin/<script_name>
```

For example I have copied the script **"testmsg.sh"** to **/system/bin**, renamed it
to **"testmsg"** using the following commands:

```
    su/
    mount -o rw,remount /system
    cp /storage/sdcard0/sh/testmsg.sh /system/bin/testmsg
    chmod 555 /system/bin/testmsg (chmod +x did not work, giving me a bad mode error)
```

Now in the Terminal Emulator, just enter the name of the file and the script
will execute.

## Creditos

Todos os créditos e e inspirações pertencem aos seguintes projetos:
* [android-native-exe-demo](https://github.com/gimite/android-native-exe-demo)
* [github-markdown-toc](https://github.com/ekalinin/github-markdown-toc)

## Propaganda

Gostou do projeto `android-shellscripts-demos`? Então siga o repositório no
[GitHub](https://github.com/lopesivan/android-shellscripts-demos)
e vote nele, mas se você estiver se sentindo animado, siga o
[blog](http://42algoritmos.com.br/blog/iczar) do programador
[iczar](https://keybase.io/iczar) ou acompanhe no
[GitHub](https://github.com/lopesivan) seus projetos.

## Licença

Copyright (c) ICzar.  Distribuido dentro dos mesmos termos da licença
[GPLv3](https://www.gnu.org/licenses/gpl-3.0.en.html).

PACKAGE=jackpal.androidterm

adb shell am start -n jackpal.androidterm/.ActivityName


	
linux/mac users can also create a script to run an apk with something like the following:

create a file named "adb-run.sh" with these 3 lines:

pkg=$(aapt dump badging $1|awk -F" " '/package/ {print $2}'|awk -F"'" '/name=/ {print $2}')
act=$(aapt dump badging $1|awk -F" " '/launchable-activity/ {print $2}'|awk -F"'" '/name=/ {print $2}')
adb shell am start -n $pkg/$act
then "chmod +x adb-run.sh" to make it executable.

now you can simply:

adb-run.sh myapp.apk

The benefit here is that you don't need to know the package name or launchable activity name. Similarly, you can create "adb-uninstall.sh myapp.apk"

Note: This requires that you have aapt in your path. You can find it under the new build tools folder in the SDK.


open ~/.bash_profile and add these bash functions to the end of the file

function androidinstall(){
   adb install -r ./bin/$1.apk
}
function androidrun(){
   ant clean debug
   adb shell am start -n $1/$1.$2
}
then open the Android project folder

androidinstall app-debug && androidrun com.example.app MainActivity

up vote
10
down vote
We can as well start an application by knowing application type and feeding it with data:

adb shell am start -d "file:///sdcard/sample.3gp" -t "video/3gp" -a android.intent.action.VIEW
This command displays available Video Players to play sample.3gp file



While looking around my Android filesystem, I found that it did, in fact have a `/etc/init.d/` directory. After peeking around in there, I found `/etc/init.d/20userinit` with the following lines:

    if [ -e /data/local/userinit.sh ];
    then 
        log -p -i -t userinit "Executing /data/local/userinit.sh";
        busybux chmod +x /data/local/userinit.sh;
        logwrapper /system/bin/sh /data/local/userinit.sh;
        setprop cm.userinit.active 1;
    fi;

This being, of course, _exactly_ what I needed, I wrote the following script on my computer then pushed it to my device:

    #!/system/bin/sh 
    
    dropbear -s -g 

(pushed to device via `scp userinit.sh phone:/data/local/userinit.sh`, mind you :] )

Rebooted the device, then ran `ps | grep "[d]ropbear"`, and sure enough, it's running. Coolness!


Look to `/etc/` directory. Usually it is placed in `/system/` partition which you can mount as RW:

    $ ls -l /etc
    lrwxrwxrwx 1 root root 11 Jan 1  2009 /etc -> /system/etc
    $ su
    $ mount -o remount,rw /system
    $ chmod o+w /system/etc  # for "adb push"

Some above steps may be replaces with:

    $ adb root
    $ adb remount

and later remount RO:

    $ chmod o-w /system/etc
    $ mount -o remount,ro /system

Now your task to find executable or `*rc` file which you modify to achieve your goal:

    $ find /etc -type f -perm +110
    $ find /etc -name "*rc"
    $ find /etc -name "init*"
    $ grep -R /data /etc
    $ grep -R /system /etc

Google about each candidate to get know how this file was used.

Good candidate for including custom scripts are lines from:

    $ grep service /init*.rc

As each device unique you may need to do own guess about search criteria...

For example I found `/etc/mkshrc` which used by Korn shell. I update this file to extend `PATH` env var and now each time I do `adb shell` I have Busybox symlinks in my PATH!

See also **hard way** (if you have no luck with finding *magic* file): http://stackoverflow.com/questions/9768103/make-persistent-changes-to-init-rc

